// <auto-generated />
using System;
using ControleFluxoAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControleFluxoAPI.Migrations
{
    [DbContext(typeof(ControleFluxoDBContext))]
    partial class ControleFluxoDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("DateTime2");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<string>("PlacaVeiculo")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("VagaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("VagaId");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Estoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("nome")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Estoques");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            nome = "Estoque Principal"
                        });
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Fornecedor de Peças"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Fornecedor de Frutas"
                        });
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Vaga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EstoqueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOcupada")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EstoqueId");

                    b.ToTable("Vagas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstoqueId = 100,
                            IsOcupada = false
                        },
                        new
                        {
                            Id = 2,
                            EstoqueId = 100,
                            IsOcupada = false
                        },
                        new
                        {
                            Id = 3,
                            EstoqueId = 100,
                            IsOcupada = false
                        });
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Agendamento", b =>
                {
                    b.HasOne("ControleFluxoAPI.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("Agendamentos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleFluxoAPI.Domain.Models.Vaga", "Vaga")
                        .WithMany("Agendamentos")
                        .HasForeignKey("VagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Vaga", b =>
                {
                    b.HasOne("ControleFluxoAPI.Domain.Models.Estoque", "Estoque")
                        .WithMany("Vagas")
                        .HasForeignKey("EstoqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estoque");
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Estoque", b =>
                {
                    b.Navigation("Vagas");
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Fornecedor", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("ControleFluxoAPI.Domain.Models.Vaga", b =>
                {
                    b.Navigation("Agendamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
